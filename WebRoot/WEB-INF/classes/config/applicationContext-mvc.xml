<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"  
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd   
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
 		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"  default-autowire="byName" default-lazy-init="false">	
 	<!-- ========================================== -->
           <!-- 加载项目配置文件  -->
	<!-- ========================================== -->
 	<bean id="propertyConfigurer" class="com.jo.commons.SpringCodeProperties">
 		<property name="order" value="2" />
	    <property name="locations">
	        <list>
	            <value>/WEB-INF/classes/config.properties</value>
	        </list>
	    </property>
	</bean>	
	<!-- 启动注解驱动的Spring MVC功能，
		会自动注册DefaultAnnotationHandlerMapping与
		AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。
		并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读
		写XML的支持（JAXB），读写JSON的支持。
	-->      
	<mvc:annotation-driven />
	<!-- 启用注解 -->
	<context:annotation-config />
	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy />  
	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller --> 
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<!--  使用默认的Servlet来响应静态文件。 -->
	<mvc:default-servlet-handler/>
	
	<!-- 启用spring的扫描加注解的方式,让spring管理Bean,已包的形式扫描，如：com.mvc spring会扫描com.mvc包下的所有类-->        
	<context:component-scan base-package="com.jo.**" />
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>
	
	<!-- 对静态资源文件的访问  restful-->     
	<mvc:resources mapping="/resource/**" location="/resource/" />
	<mvc:resources mapping="/scripts/**" location="/scripts/" />
	<mvc:resources mapping="/styles/**" location="/styles/" />
		
	 <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->      
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	 	<property name="prefix" value="/jsp/"/>  
   		<property name="suffix" value=".jsp"/>
	 </bean>
	 <!-- Spring在druid中监控配置 -->
	 <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	 <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	   <property name="patterns">
	       <list>
	           <value>com.jo.*.service.*</value>
	           <value>com.jo.*.dao.*</value>
	       </list>
	   </property>
	 </bean>
	<aop:config proxy-target-class="true">
	   <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	 
	<!-- 拦截器设置 -->
 	<mvc:interceptors>
	    <bean class="com.jo.interceptor.CoreInterceptor" />
	</mvc:interceptors>

	<!-- ========================================== -->
            <!-- Spring 上传下载设置 -->
	<!-- ========================================== -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" > 
	    <property name="defaultEncoding" value="UTF-8"/> <!-- 默认编码 (ISO-8859-1) -->  
	    <property name="maxInMemorySize" value="10240"/> <!-- 最大内存大小 (10240)-->  
	    <property name="maxUploadSize" value="-1"/> <!-- 最大文件大小，-1为无限止(-1) -->  
	</bean>  	
	<bean id="config" class="java.util.HashMap">   
	    <constructor-arg>   
	       <map>
	       	  <entry key="filepath" value="${upload_filepath}"/>
	       	  <entry key="host" value="${upload_host}"/>
	       	  <entry key="report" value="${upload_report}"/>
	       </map> 
	    </constructor-arg>   
	</bean>
	<bean id="execlConfig" class="java.util.HashMap">   
	    <constructor-arg>   
	       <map>
	       	  <entry key="005001" value="sendDate,sendNo,contractNo,goodsName,goodsSpec,batchNo,customer,number,
	       	  purchaseUnitPrice,purchaseTotalPrice,saleCostUnitPrice,saleCostTotalPrice,saleUnitPrice,saleTotalPrice,
	       	  antcipatedFreight,totalPrice,sumMoney,noMoney,profit,paymentRoute,sendPonse,billing,otherPrice,sendFreight,pureProfit"/>
	       </map> 
	    </constructor-arg>   
	</bean>
	<!-- ====================================================== -->
			<!-- 邮件发送配置文件 -->
	<!-- ====================================================== -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email_host}"></property>
		<property name="username" value="${email_username}"></property>
		<property name="password" value="${email_password}"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.timeout">25000</prop>
				<prop key="mail.smtp.port">465</prop>
				<prop key="mail.smtp.socketFactory.port">465</prop>
				<prop key="mail.smtp.socketFactory.fallback">false</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
			</props>
		</property>
	</bean>
</beans> 
